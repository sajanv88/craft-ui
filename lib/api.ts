/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/keycloak/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all users in the realm with pagination support. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    /** @description Search for a string contained in Username, FirstName, LastName or Email. */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatedResponseOfUserRepresentation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keycloak/admin/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all roles in the realm with pagination support. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    /** @description Search for a string contained in role name */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatedResponseOfRoleRepresentation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keycloak/admin/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all clients in the realm with pagination support. */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatedResponseOfClientRepresentation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keycloak/profile/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the current user's profile information from the token. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Profile"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locales": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    page?: number;
                    pageSize?: number;
                    cultureCode?: string;
                    key?: string;
                    value?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatedResponseOfLocaleDto"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateLocaleDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateLocaleDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LocalizationEntity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/locales/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LocalizationEntity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locales/all-cultures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CultureCodeAndDetailDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/locales/culture/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    code: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LocaleWithCultureDetailDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/todos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTodo"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/todos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateTodo"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ClientRepresentation: {
            access?: components["schemas"]["ClientRepresentation_access"];
            additionalData?: Record<string, never>;
            adminUrl?: string | null;
            alwaysDisplayInConsole?: boolean | null;
            attributes?: components["schemas"]["ClientRepresentation_attributes"];
            authenticationFlowBindingOverrides?: components["schemas"]["ClientRepresentation_authenticationFlowBindingOverrides"];
            authorizationServicesEnabled?: boolean | null;
            authorizationSettings?: components["schemas"]["ResourceServerRepresentation"];
            baseUrl?: string | null;
            bearerOnly?: boolean | null;
            clientAuthenticatorType?: string | null;
            clientId?: string | null;
            clientTemplate?: string | null;
            consentRequired?: boolean | null;
            defaultClientScopes?: string[] | null;
            defaultRoles?: string[] | null;
            description?: string | null;
            directAccessGrantsEnabled?: boolean | null;
            directGrantsOnly?: boolean | null;
            enabled?: boolean | null;
            frontchannelLogout?: boolean | null;
            fullScopeAllowed?: boolean | null;
            id?: string | null;
            implicitFlowEnabled?: boolean | null;
            name?: string | null;
            /** Format: int32 */
            nodeReRegistrationTimeout?: number | null;
            /** Format: int32 */
            notBefore?: number | null;
            optionalClientScopes?: string[] | null;
            origin?: string | null;
            protocol?: string | null;
            protocolMappers?: components["schemas"]["ProtocolMapperRepresentation"][] | null;
            publicClient?: boolean | null;
            redirectUris?: string[] | null;
            registeredNodes?: components["schemas"]["ClientRepresentation_registeredNodes"];
            registrationAccessToken?: string | null;
            rootUrl?: string | null;
            secret?: string | null;
            serviceAccountsEnabled?: boolean | null;
            standardFlowEnabled?: boolean | null;
            surrogateAuthRequired?: boolean | null;
            type?: string | null;
            useTemplateConfig?: boolean | null;
            useTemplateMappers?: boolean | null;
            useTemplateScope?: boolean | null;
            webOrigins?: string[] | null;
        };
        ClientRepresentation_access: {
            additionalData?: Record<string, never> | null;
        } | null;
        ClientRepresentation_attributes: {
            additionalData?: Record<string, never> | null;
        } | null;
        ClientRepresentation_authenticationFlowBindingOverrides: {
            additionalData?: Record<string, never> | null;
        } | null;
        ClientRepresentation_registeredNodes: {
            additionalData?: Record<string, never> | null;
        } | null;
        Composites: {
            additionalData?: Record<string, never> | null;
            application?: components["schemas"]["Composites_application"];
            client?: components["schemas"]["Composites_client"];
            realm?: string[] | null;
        } | null;
        Composites_application: {
            additionalData?: Record<string, never> | null;
        } | null;
        Composites_client: {
            additionalData?: Record<string, never> | null;
        } | null;
        CreateLocaleDto: {
            cultureCode: string;
            key: string;
            value: string;
        };
        CreateTodo: {
            content: string;
        };
        CredentialRepresentation: {
            id?: string | null;
            type?: string | null;
            userLabel?: string | null;
            /** Format: int64 */
            createdDate?: number | null;
            secretData?: string | null;
            credentialData?: string | null;
            /** Format: int32 */
            priority?: number | null;
            value?: string | null;
            temporary?: boolean | null;
            device?: string | null;
            hashedSaltedValue?: string | null;
            salt?: string | null;
            /** Format: int32 */
            hashIterations?: number | null;
            /** Format: int32 */
            counter?: number | null;
            algorithm?: string | null;
            /** Format: int32 */
            digits?: number | null;
            /** Format: int32 */
            period?: number | null;
            config?: {
                [key: string]: string[];
            } | null;
        };
        CultureCodeAndDetailDto: {
            cultureCode: string;
            detail: string;
        };
        FederatedIdentityRepresentation: {
            identityProvider?: string | null;
            userId?: string | null;
            userName?: string | null;
        };
        LocaleDto: {
            /** Format: uuid */
            id: string;
            cultureCode: string;
            key: string;
            value: string;
        };
        LocaleWithCultureDetailDto: {
            cultureDetails: components["schemas"]["CultureCodeAndDetailDto"];
            l: {
                [key: string]: string;
            };
        };
        LocalizationEntity: {
            /** Format: uuid */
            id?: string;
            cultureCode?: string;
            key?: string;
            value?: string;
        };
        NullableOfDecisionStrategy: number | null;
        NullableOfLogic: number | null;
        NullableOfPolicyEnforcementMode: number | null;
        PaginatedResponseOfClientRepresentation: {
            items?: components["schemas"]["ClientRepresentation"][];
            /** Format: int32 */
            currentPage?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            totalPages?: number;
            hasPrevious?: boolean;
            hasNext?: boolean;
        };
        PaginatedResponseOfLocaleDto: {
            items?: components["schemas"]["LocaleDto"][];
            /** Format: int32 */
            currentPage?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            totalPages?: number;
            hasPrevious?: boolean;
            hasNext?: boolean;
        };
        PaginatedResponseOfRoleRepresentation: {
            items?: components["schemas"]["RoleRepresentation"][];
            /** Format: int32 */
            currentPage?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            totalPages?: number;
            hasPrevious?: boolean;
            hasNext?: boolean;
        };
        PaginatedResponseOfUserRepresentation: {
            items?: components["schemas"]["UserRepresentation"][];
            /** Format: int32 */
            currentPage?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            totalPages?: number;
            hasPrevious?: boolean;
            hasNext?: boolean;
        };
        PolicyRepresentation: {
            additionalData?: Record<string, never> | null;
            config?: components["schemas"]["PolicyRepresentation_config"];
            decisionStrategy?: components["schemas"]["NullableOfDecisionStrategy"];
            description?: string | null;
            id?: string | null;
            logic?: components["schemas"]["NullableOfLogic"];
            name?: string | null;
            owner?: string | null;
            policies?: string[] | null;
            resources?: string[] | null;
            resourcesData?: components["schemas"]["ResourceRepresentation"][] | null;
            scopes?: string[] | null;
            scopesData?: components["schemas"][] | null;
            type?: string | null;
        };
        PolicyRepresentation_config: {
            additionalData?: Record<string, never> | null;
        } | null;
        Profile: {
            sub?: string;
            email?: string;
            fullName?: string;
            preferredUsername?: string;
            isEmailVerified?: boolean;
        };
        ProtocolMapperRepresentation: {
            additionalData?: Record<string, never> | null;
            config?: components["schemas"]["ProtocolMapperRepresentation_config"];
            consentRequired?: boolean | null;
            consentText?: string | null;
            id?: string | null;
            name?: string | null;
            protocol?: string | null;
            protocolMapper?: string | null;
        };
        ProtocolMapperRepresentation_config: {
            additionalData?: Record<string, never> | null;
        } | null;
        ResourceRepresentation: {
            additionalData?: Record<string, never> | null;
            attributes?: components["schemas"]["ResourceRepresentation_attributes"];
            displayName?: string | null;
            iconUri?: string | null;
            id?: string | null;
            name?: string | null;
            owner?: components["schemas"]["ResourceRepresentation_owner"];
            ownerManagedAccess?: boolean | null;
            scopes?: components["schemas"]["ScopeRepresentation"][] | null;
            scopesUma?: components["schemas"][] | null;
            type?: string | null;
            uri?: string | null;
            uris?: string[] | null;
        };
        ResourceRepresentation_attributes: {
            additionalData?: Record<string, never> | null;
        } | null;
        ResourceRepresentation_owner: {
            additionalData?: Record<string, never> | null;
            id?: string | null;
            name?: string | null;
        } | null;
        ResourceServerRepresentation: {
            additionalData?: Record<string, never> | null;
            allowRemoteResourceManagement?: boolean | null;
            clientId?: string | null;
            decisionStrategy?: components["schemas"]["NullableOfDecisionStrategy"];
            id?: string | null;
            name?: string | null;
            policies?: components["schemas"]["PolicyRepresentation"][] | null;
            policyEnforcementMode?: components["schemas"]["NullableOfPolicyEnforcementMode"];
            resources?: components["schemas"][] | null;
            scopes?: components["schemas"][] | null;
        } | null;
        RoleRepresentation: {
            additionalData?: Record<string, never> | null;
            attributes?: components["schemas"]["RoleRepresentation_attributes"];
            clientRole?: boolean | null;
            composite?: boolean | null;
            composites?: components["schemas"]["Composites"];
            containerId?: string | null;
            description?: string | null;
            id?: string | null;
            name?: string | null;
            scopeParamRequired?: boolean | null;
        };
        RoleRepresentation_attributes: {
            additionalData?: Record<string, never> | null;
        } | null;
        ScopeRepresentation: {
            additionalData?: Record<string, never> | null;
            displayName?: string | null;
            iconUri?: string | null;
            id?: string | null;
            name?: string | null;
            policies?: components["schemas"][] | null;
            resources?: components["schemas"][] | null;
        };
        SocialLinkRepresentation: {
            socialProvider?: string | null;
            socialUserId?: string | null;
            socialUsername?: string | null;
        };
        UpdateLocaleDto: {
            /** Format: uuid */
            id: string;
            cultureCode: string;
            key: string;
            value: string;
        };
        UpdateTodo: {
            content: string;
            isCompleted: boolean;
        };
        UserConsentRepresentation: {
            clientId?: string | null;
            grantedClientScopes?: string[] | null;
            /** Format: int64 */
            createdDate?: number | null;
            /** Format: int64 */
            lastUpdatedDate?: number | null;
            grantedRealmRoles?: string[] | null;
        };
        UserProfileAttributeGroupMetadata: {
            name?: string | null;
            displayHeader?: string | null;
            displayDescription?: string | null;
            annotations?: Record<string, never> | null;
        };
        UserProfileAttributeMetadata: {
            name?: string | null;
            displayName?: string | null;
            required?: boolean | null;
            readOnly?: boolean | null;
            annotations?: Record<string, never> | null;
            validators?: {
                [key: string]: Record<string, never>;
            } | null;
            group?: string | null;
            multivalued?: boolean | null;
        };
        UserProfileMetadata: {
            attributes?: components["schemas"]["UserProfileAttributeMetadata"][] | null;
            groups?: components["schemas"]["UserProfileAttributeGroupMetadata"][] | null;
        } | null;
        UserRepresentation: {
            id?: string | null;
            username?: string | null;
            firstName?: string | null;
            lastName?: string | null;
            email?: string | null;
            emailVerified?: boolean | null;
            attributes?: {
                [key: string]: string[];
            } | null;
            userProfileMetadata?: components["schemas"]["UserProfileMetadata"];
            self?: string | null;
            origin?: string | null;
            /** Format: int64 */
            createdTimestamp?: number | null;
            enabled?: boolean | null;
            totp?: boolean | null;
            federationLink?: string | null;
            serviceAccountClientId?: string | null;
            credentials?: components["schemas"]["CredentialRepresentation"][] | null;
            disableableCredentialTypes?: string[] | null;
            requiredActions?: string[] | null;
            federatedIdentities?: components["schemas"]["FederatedIdentityRepresentation"][] | null;
            realmRoles?: string[] | null;
            clientRoles?: {
                [key: string]: components["schemas"];
            } | null;
            clientConsents?: components["schemas"]["UserConsentRepresentation"][] | null;
            /** Format: int32 */
            notBefore?: number | null;
            applicationRoles?: {
                [key: string]: components["schemas"];
            } | null;
            socialLinks?: components["schemas"]["SocialLinkRepresentation"][] | null;
            groups?: string[] | null;
            access?: {
                [key: string]: boolean;
            } | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
